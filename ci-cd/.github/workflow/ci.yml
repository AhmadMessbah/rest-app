name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-api-gateway:
    uses: ./.github/workflows/test-java.yml
    with:
      module: api-gateway
    secrets:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-persons-service:
    uses: ./.github/workflows/test-java.yml
    with:
      module: persons-service
      postgres-url: jdbc:postgresql://localhost:5432/personsdb
      postgres-user: admin
      postgres-password: securepassword
    secrets:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-image-requests-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Pip Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-image-requests-service-${{ hashFiles('image-requests-service/requirements.txt') }}
          restore-keys: pip-image-requests-service-

      - name: Build and Test
        working-directory: ./image-requests-service
        run: |
          pip install -r requirements.txt
          pytest --cov=./ --cov-report=xml
        env:
          MONGODB_URI: mongodb://localhost:27017/image_requests_db
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          files: ./image-requests-service/coverage.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Security Scan
        uses: ./.github/actions/security-scan
        with:
          scan-path: image-requests-service

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        with:
          projectBaseDir: ./image-requests-service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  test-web-ui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache NPM Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-web-ui-${{ hashFiles('web-ui/package.json') }}
          restore-keys: npm-web-ui-

      - name: Build and Test
        working-directory: ./web-ui
        run: |
          npm ci
          npm run test -- --coverage
        env:
          VITE_API_URL: http://localhost:8080/api

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          files: ./web-ui/coverage/lcov.info
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Security Scan
        uses: ./.github/actions/security-scan
        with:
          scan-path: web-ui

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        with:
          projectBaseDir: ./web-ui
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-java:
    runs-on: ubuntu-latest
    needs: [test-api-gateway, test-persons-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin

      - name: SonarQube Scan for Java Modules
        run: |
          mvn -B sonar:sonar \
            -f api-gateway/pom.xml \
            -Dsonar.projectKey=api-gateway \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          mvn -B sonar:sonar \
            -f persons-service/pom.xml \
            -Dsonar.projectKey=persons-service \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  notify:
    needs: [test-api-gateway, test-persons-service, test-image-requests-service, test-web-ui, sonar-java]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        run: |
          chmod +x ci-cd/scripts/notify-slack.sh
          ci-cd/scripts/notify-slack.sh "${{ needs.test-api-gateway.result }}" "${{ github.event_name }}" "${{ github.repository }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}